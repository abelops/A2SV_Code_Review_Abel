class NumMatrix:

    def __init__(self, matrix: List[List[int]]):
        self.mat = [[0]*(len(matrix[0])+1)]
        for i in range(len(matrix)):
            row = [0]
            for j in range(len(matrix[0])):
                row.append(matrix[i][j])
            self.mat.append(row)
        self.pref = self.mat
        pref = self.pref
        mat = self.mat
        for i in range(1, len(mat)):
            for j in range(1, len(mat[0])):
                val = pref[i-1][j] + pref[i][j-1] - pref[i-1][j-1] + mat[i][j]
                pref[i][j] = val
        self.pref = pref
        
    def sumRegion(self, row1: int, col1: int, row2: int, col2: int) -> int:
        pref = self.pref
        ans = pref[row2+1][col2+1] - pref[row2+1][col1] - pref[row1][col2+1] + pref[row1][col1]
        return ans
        
        
# Some change

# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
